description: Pipeline for parsing fortiweb logs
processors:
- set:
    field: event.ingested
    value: '{{_ingest.timestamp}}'
- grok:
    field: message
    patterns:
    - '(%{SYSLOG5424PRI}|%{SYSLOGTIMESTAMP} %{IPORHOST} )%{GREEDYDATA:syslog5424_sd}$'
- kv:
    field: syslog5424_sd
    field_split: " (?=[a-z0-9\\_\\-]+=)"
    value_split: "="
    prefix: "fortinet.tmp."
    ignore_missing: true
    ignore_failure: false
    trim_value: "\""
- rename:
    field: fortinet.tmp
    target_field: fortinet.fortiweb
    ignore_missing: true
- script:
    lang: painless
    source: |
      def fw = ctx?.fortinet?.fortiweb;
      if (fw != null) {
        fw.entrySet().removeIf(entry -> entry.getValue() == "N/A" || entry.getValue() == "undefined");
      }
- set:
    field: observer.vendor
    value: Fortinet
- set:
    field: observer.product
    value: Fortiweb
- set:
    field: observer.type
    value: WAF
- set:
    field: event.timezone
    value: "{{fortinet.fortiweb.tz}}"
    ignore_empty_value: true
- set:
    field: _temp.time
    value: "{{fortinet.fortiweb.date}} {{fortinet.fortiweb.time}} {{event.timezone}}"
    if: "ctx.event?.timezone != null"
- set:
    field: _temp.time
    value: "{{fortinet.fortiweb.date}} {{fortinet.fortiweb.time}}"
    if: "ctx.event?.timezone == null"
- date:
    field: _temp.time
    target_field: "@timestamp"
    formats:
    - yyyy-MM-dd HH:mm:ss
    - yyyy-MM-dd HH:mm:ss Z
    - yyyy-MM-dd HH:mm:ss z
    - ISO8601
    timezone: "{{event.timezone}}"
    if: "ctx.event?.timezone != null"
- date:
    field: _temp.time
    target_field: "@timestamp"
    formats:
    - yyyy-MM-dd HH:mm:ss
    - yyyy-MM-dd HH:mm:ss Z
    - yyyy-MM-dd HH:mm:ss z
    - ISO8601
    if: "ctx.event?.timezone == null"
- gsub:
    field: fortinet.fortiweb.eventtime
    pattern: "\\d{6}$"
    replacement: ""
    if: "ctx.fortinet?.fortiweb?.eventtime != null && (ctx.fortinet?.fortiweb?.eventtime).length() > 18"
- date:
    field: fortinet.fortiweb.eventtime
    target_field: event.start
    formats:
    - UNIX_MS
    timezone: "{{event.timezone}}"
    if: "ctx?.fortinet?.fortiweb?.eventtime != null && ctx.event?.timezone != null && (ctx.fortinet?.fortiweb?.eventtime).length() > 11"
- date:
    field: fortinet.fortiweb.eventtime
    target_field: event.start
    formats:
    - UNIX
    timezone: "{{event.timezone}}"
    if: "ctx?.fortinet?.fortiweb?.eventtime != null && ctx.event?.timezone != null && (ctx.fortinet?.fortiweb?.eventtime).length() <= 11"
- date:
    field: fortinet.fortiweb.eventtime
    target_field: event.start
    formats:
    - UNIX_MS
    if: "ctx?.fortinet?.fortiweb?.eventtime != null && ctx.event?.timezone == null && (ctx.fortinet?.fortiweb?.eventtime).length() > 11"
- date:
    field: fortinet.fortiweb.eventtime
    target_field: event.start
    formats:
    - UNIX
    if: "ctx?.fortinet?.fortiweb?.eventtime != null && ctx.event?.timezone == null && (ctx.fortinet?.fortiweb?.eventtime).length() <= 11"
- rename:
    field: fortinet.fortiweb.devname
    target_field: observer.name
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.device_id
    target_field: observer.serial_number
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.pri
    target_field: log.level
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.log_id
    target_field: event.code
    ignore_missing: true

- convert:
    field: fortinet.fortiweb.http_retcode
    target_field: http.response.status_code
    type: long
    ignore_failure: true
    ignore_missing: true
- convert:
    field: fortinet.fortiweb.http_response_bytes
    target_field: http.response.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
- convert:
    field: fortinet.fortiweb.http_request_bytes
    target_field: http.request.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.http_method
    target_field: http.request.method
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.http_version
    target_field: http.version
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.cipher_suite
    target_field: tls.cipher
    ignore_missing: true
- user_agent:
    field: fortinet.fortiweb.http_agent
    ignore_missing: true
- grok:
    field: fortinet.fortiweb.service
    patterns:
        - '%{TLS:tls.version_protocol}%{NUMBER:tls.version}'
        - '%{SCHEME:network.protocol}'
    pattern_definitions:
        TLS: '[a-z]{3}'
        SCHEME: 'http(?:s)'
    ignore_missing: true
    ignore_failure: true
- convert:
    field: fortinet.fortiweb.src
    target_field: source.ip
    ignore_missing: true
    type: ip
    ignore_failure: true
- convert:
    field: fortinet.fortiweb.src
    target_field: source.address
    type: string
    ignore_failure: true
    ignore_missing: true
- convert:
    field: fortinet.fortiweb.src_port
    target_field: source.port
    ignore_missing: true
    type: long
    ignore_failure: true
- convert:
    field: fortinet.fortiweb.dst
    target_field: destination.ip
    ignore_missing: true
    type: ip
    ignore_failure: true
- convert:
    field: fortinet.fortiweb.dst
    target_field: destination.address
    type: string
    ignore_failure: true
    ignore_missing: true
- convert:
    field: fortinet.fortiweb.dst_port
    target_field: destination.port
    ignore_missing: true
    type: long
    ignore_failure: true

- set:
    field: network.type
    value: ipv4
    if: (ctx.source?.ip != null && ctx.source?.ip.contains('.')) || (ctx.destination?.ip != null && ctx.destination?.ip.contains('.'))
- set:
    field: network.type
    value: ipv6
    if: ctx.source?.ip != null && ctx.source?.ip.contains(':') || (ctx.destination?.ip != null && ctx.destination?.ip.contains(':'))

- rename:
    field: fortinet.fortiweb.http_host
    target_field: url.domain
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.http_url
    target_field: url.path
    ignore_missing: true

- remove:
    field:
      - message
    ignore_missing: true
- pipeline:
    name: '{< IngestPipeline "event" >}'
    if: "ctx.fortinet?.fortiweb?.type == 'event'"
- pipeline:
    name: '{< IngestPipeline "traffic" >}'
    if: "ctx.fortinet?.fortiweb?.type == 'traffic'"
- pipeline:
    name: '{< IngestPipeline "attack" >}'
    if: "ctx.fortinet?.fortiweb?.type == 'attack'"

- rename:
    field: fortinet.fortiweb.msg
    target_field: message
    ignore_missing: true
- rename:
    field: fortinet.fortiweb.proto
    target_field: network.transport
    ignore_missing: true

- community_id:
    ignore_missing: true
    ignore_failure: true

# - geoip:
#     field: source.ip
#     target_field: source.geo
#     ignore_missing: true
#     if: "ctx.source?.geo == null"
# - geoip:
#     field: destination.ip
#     target_field: destination.geo
#     ignore_missing: true
#     if: "ctx.destination?.geo == null"
# - geoip:
#     database_file: GeoLite2-ASN.mmdb
#     field: source.ip
#     target_field: source.as
#     properties:
#     - asn
#     - organization_name
#     ignore_missing: true
# - geoip:
#     database_file: GeoLite2-ASN.mmdb
#     field: destination.ip
#     target_field: destination.as
#     properties:
#     - asn
#     - organization_name
#     ignore_missing: true
# - geoip:
#     field: source.nat.ip
#     target_field: source.geo
#     ignore_missing: true
#     if: "ctx.source?.geo == null"
# - geoip:
#     field: destination.nat.ip
#     target_field: destination.geo
#     ignore_missing: true
#     if: "ctx.destination?.geo == null"
# - geoip:
#     database_file: GeoLite2-ASN.mmdb
#     field: source.nat.ip
#     target_field: source.as
#     properties:
#     - asn
#     - organization_name
#     ignore_missing: true
#     if: "ctx.source?.as == null"
# - geoip:
#     database_file: GeoLite2-ASN.mmdb
#     field: destination.nat.ip
#     target_field: destination.as
#     properties:
#     - asn
#     - organization_name
#     ignore_missing: true
#     if: "ctx.destination?.as == null"
# - rename:
#     field: source.as.asn
#     target_field: source.as.number
#     ignore_missing: true
# - rename:
#     field: source.as.organization_name
#     target_field: source.as.organization.name
#     ignore_missing: true
# - rename:
#     field: destination.as.asn
#     target_field: destination.as.number
#     ignore_missing: true
# - rename:
#     field: destination.as.organization_name
#     target_field: destination.as.organization.name
#     ignore_missing: true
- script:
    lang: painless
    source: "ctx.network.bytes = ctx.source.bytes + ctx.destination.bytes"
    if: "ctx?.source?.bytes != null && ctx?.destination?.bytes != null"
    ignore_failure: true
- script:
    lang: painless
    source: "ctx.network.packets = ctx.source.packets + ctx.destination.packets"
    if: "ctx?.source?.packets != null && ctx?.destination?.packets != null"
    ignore_failure: true
- append:
    field: related.ip
    value: "{{source.ip}}"
    allow_duplicates: false
    if: "ctx.source?.ip != null"
- append:
    field: related.ip
    value: "{{destination.ip}}"
    allow_duplicates: false
    if: "ctx.destination?.ip != null"
- append:
    field: related.user
    value: "{{source.user.name}}"
    allow_duplicates: false
    if: "ctx.source?.user?.name != null"
- append:
    field: related.user
    value: "{{destination.user.name}}"
    allow_duplicates: false
    if: "ctx.destination?.user?.name != null"
- append:
    field: related.hosts
    value: "{{destination.address}}"
    allow_duplicates: false
    if: "ctx.destination?.address != null"
- append:
    field: related.hosts
    value: "{{source.address}}"
    allow_duplicates: false
    if: "ctx.source?.address != null"
- append:
    field: related.hosts
    value: "{{dns.question.name}}"
    allow_duplicates: false
    if: "ctx.dns?.question?.name != null"
- script:
    lang: painless
    source: |
      def dnsIPs = ctx?.dns?.resolved_ip;
      if (dnsIPs != null && dnsIPs instanceof List) {
        if (ctx?.related?.ip == null) {
          ctx.related.ip = [];
        }
        for (ip in dnsIPs) {
          if (!ctx.related.ip.contains(ip)) {
            ctx.related.ip.add(ip);
          }
        }
      }
- remove:
    field:
      - _temp
      - host
      - syslog5424_sd
      - syslog5424_pri
      - fortinet.fortiweb.agent
      - fortinet.fortiweb.date
      - fortinet.fortiweb.devid
      - fortinet.fortiweb.duration
      - fortinet.fortiweb.eventtime
      - fortinet.fortiweb.hostname
      - fortinet.fortiweb.time
      - fortinet.fortiweb.tz
      - fortinet.fortiweb.timezone
      - fortinet.fortiweb.timezone_dayst
      - fortinet.fortiweb.url
      - fortinet.fortiweb.src
      - fortinet.fortiweb.src_port
      - fortinet.fortiweb.dst
      - fortinet.fortiweb.dst_port
      - fortinet.fortiweb.http_retcode
      - fortinet.fortiweb.http_response_bytes
      - fortinet.fortiweb.http_request_bytes
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null);
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
